// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  site          Site[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Site {
  id          Int      @id @default(autoincrement())
  name        String?  @db.VarChar(255)
  email       String?  @db.VarChar(255)
  password    String   @db.VarChar(255)
  dateCreated DateTime @default(now())

  userId     String       
  user       User         @relation(fields: [userId], references: [id])
  siteUpdate SiteUpdate[]

  @@map("sites")
}

model SiteUpdate {
  id           Int      @id @default(autoincrement())
  newName      String?  @db.VarChar(255)
  newEmail     String?  @db.VarChar(255)
  newPassword  String?  @db.VarChar(255)
  oldName      String?  @db.VarChar(255)
  oldEmail     String?  @db.VarChar(255)
  oldPassword  String?  @db.VarChar(255)
  dateModified DateTime @default(now())

  siteId Int
  site   Site @relation(fields: [siteId], references: [id])
  @@map("site_updates")
}
